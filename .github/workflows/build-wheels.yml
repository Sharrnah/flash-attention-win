name: Build flash-attention Wheels for Windows

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of flash-attention to build: (format: v2.3.4/v2.3.4.post1)'
        default: 'v2.3.4'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of flash-attention to build (format: v2.3.4/v2.3.4.post1)'
        default: 'v2.3.4'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build_wheels:
    name: Build wheels for Python ${{ matrix.pyver }}, CUDA ${{ matrix.cuda }}, and Torch ${{ matrix.torchver }}
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        pyver: ["3.11", "3.12", "3.13"]
        cuda: ["12.8.1", "12.9.0"]
        torchver: ["2.8.0.dev20250627", "2.7.0.dev20250311", "2.7.0"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Install VS2022 BuildTools 17.9.7
        if: runner.os == 'Windows'
        run: choco install -y visualstudio2022buildtools --version=117.9.7.0 --params "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --installChannelUri https://aka.ms/vs/17/release/180911598_-255012421/channel"

      - name: Install CUDA ${{ matrix.cuda }}
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: "${{ matrix.cuda }}"
          method: "network"
          sub-packages: '["nvcc", "cudart", "cublas", "cufft", "curand", "cusolver", "cusparse", "visual_studio_integration"]'

      - name: Install the latest version of uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.pyver }}

      - name: Install Dependencies
        run: |
          git config --system core.longpaths true

          $cudaVersion = '${{ matrix.cuda }}'
          $cudaVersionPytorch = $cudaVersion.Remove($cudaVersion.LastIndexOf('.')).Replace('.','') # e.g. 12.8.1 -> 12.8 -> 128

          $torchVersion = '${{ matrix.torchver }}'
          if ($torchVersion -match '\.dev') {
            $pytorchIndexUrl = "https://download.pytorch.org/whl/nightly/cu$cudaVersionPytorch"
          } else {
            $pytorchIndexUrl = "https://download.pytorch.org/whl/cu$cudaVersionPytorch"
          }

          uv pip install --upgrade build setuptools wheel packaging ninja psutil
          uv pip install torch==$torchVersion --extra-index-url $pytorchIndexUrl

      - name: Build Wheel
        id: build-wheel
        run: |
          if ($IsWindows) {
            Import-Module 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
            Enter-VsDevShell -VsInstallPath 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools' -DevCmdArguments '-arch=x64 -host_arch=x64'
            $env:DISTUTILS_USE_SDK=1
          }

          $cudaVersionShort = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          $packageVersion = $env:PCKGVER.TrimStart('v')

          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX

          $env:MAX_JOBS = '1'
          $env:FLASH_ATTENTION_FORCE_BUILD = 'TRUE'
          $env:FLASH_ATTENTION_FORCE_CXX11_ABI = 'FALSE'
          $env:BUILD_TARGET = "cuda"

          python setup.py bdist_wheel --dist-dir=dist

          $wheel = (gi '.\dist\*.whl')[0]
          $parts = $wheel.BaseName -split '-'
          $pyTag = $parts[2]  # cp311 or cp312, etc.
          $abiTag = $parts[3] # same as pyTag usually
          $platTag = $parts[4] # win_amd64, etc.

          $newName = "flash_attn-$packageVersion+cu$cudaVersionShort+torch${{ matrix.torchver }}-$pyTag-$abiTag-$platTag.whl"
          Move-Item $wheel.FullName ".\dist\$newName"

      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.6.1
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: ${{ inputs.version }}
          file_glob: true
          overwrite: true
          release_name: ${{ inputs.version }}
